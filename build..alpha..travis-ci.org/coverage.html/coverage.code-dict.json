{"/home/travis/build/npmtest/node-npmtest-generator-zf5/test.js":"/* istanbul instrument in package npmtest_generator_zf5 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-zf5/lib.npmtest_generator_zf5.js":"/* istanbul instrument in package npmtest_generator_zf5 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_zf5 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_zf5 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-zf5/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-zf5 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_zf5 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_zf5\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_zf5.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_zf5.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_zf5.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_zf5.__dirname + '/lib.npmtest_generator_zf5.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-zf5/node_modules/generator-zf5/app/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar chalk = require('chalk');\nvar mkdirp = require('mkdirp');\n\nvar Zf5Generator = yeoman.generators.Base.extend({\n\n\tinit: function () {\n\t\tthis.pkg = require('../package.json');\n\t\tthis.config.save();\n\n\t\tthis.on('end', function () {\n\t\t\tif (!this.options['skip-install']) {\n\t\t\t\tthis.installDependencies();\n\t\t\t}\n\t\t});\n\t},\n\n\taskForFontAwesome: function () {\n\t\tvar cb = this.async();\n\n\t\t// have Yeoman greet the user.\n\t\tthis.log(this.yeoman);\n\n\t\tthis.log(chalk.bold.blue('=================='));\n\t\tthis.log(chalk.bold.blue(' Yo Foundation 5!'));\n\t\tthis.log(chalk.bold.blue('=================='));\n\n\t\tvar prompts = {\n\t\t\ttype: 'confirm',\n\t\t\tname: 'fontAwesome',\n\t\t\tmessage: 'Would you like to include Font Awesome? (Font Awesome gives you scalable vector icons..)',\n\t\t\tdefault: true\n\t\t};\n\n\t\tthis.prompt(prompts, function (props) {\n\t\t\tthis.fontAwesome = props.fontAwesome;\n\n\t\t\tcb();\n\t\t}.bind(this));\n\t},\n\n\taskForCompass: function () {\n\t\tvar cb = this.async();\n\n\t\tvar prompts = {\n\t\t\ttype: 'confirm',\n\t\t\tname: 'compass',\n\t\t\tmessage: 'Would you like to use Scss with Compass? (default: Scss with Libsass)',\n\t\t\tdefault: false\n\t\t};\n\n\t\tthis.prompt(prompts, function (props) {\n\t\t\tthis.compass = props.compass;\n\n\t\t\tcb();\n\t\t}.bind(this));\n\t},\n\n\tapp: function () {\n\t\tmkdirp('dist');\n\t\tmkdirp('app');\n\t\tthis.template('bower.json', 'bower.json');\n\t\tthis.template('package.json', 'package.json');\n\t\tthis.template('Gruntfile.js', 'Gruntfile.js');\n\t\tthis.copy('.jshintrc', '.jshintrc');\n\t\tthis.copy('.bowerrc', '.bowerrc');\n\t\tthis.copy('gitignore', '.gitignore');\n\t\tthis.copy('README.md', 'README.md');\n\t\tthis.template('index.html', 'app/index.html');\n\t\tmkdirp('app/fonts');\n\t\tmkdirp('app/images');\n\t\tmkdirp('app/js');\n\t\tmkdirp('app/css');\n\t\tmkdirp('app/scss');\n\t\tthis.copy('scss/app.scss', 'app/scss/app.scss');\n\t\tthis.copy('scss/_settings.scss', 'app/scss/_settings.scss');\n\t\tthis.template('scss/_appstyles.scss', 'app/scss/_appstyles.scss');\n\t\tthis.copy('js/app.js', 'app/js/app.js');\n\t\tthis.copy('css/template_override.css', 'app/css/app_override.css');\n\t},\n\n    install: function () {\n        this.installDependencies();\n    }\n\n});\n\nmodule.exports = Zf5Generator;\n","/home/travis/build/npmtest/node-npmtest-generator-zf5/node_modules/generator-zf5/app/templates/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n    require('load-grunt-tasks')(grunt);\n\n\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        app: 'app',\n        dist: 'dist',\n\n        sass: {<% if (!compass) { %>\n            options: {\n                includePaths: ['<%%= app %>/bower_components/foundation/scss']\n            },\n            dist: {\n                options: {\n                    outputStyle: 'extended'\n                },\n                files: {\n                    '<%%= app %>/css/app.css': '<%%= app %>/scss/app.scss'\n                }\n            }<% } else { %>\n            dist: {\n                options: {\n                    style: 'expanded', // expanded or nested or compact or compressed\n                    loadPath: '<%%= app %>/bower_components/foundation/scss',\n                    compass: true,\n                    quiet: true\n                },\n                files: {\n                    '<%%= app %>/css/app.css': '<%%= app %>/scss/app.scss'\n                }\n            }<% } %>\n        },\n\n        postcss: {\n            options: {\n                processors: [\n                    require('autoprefixer')({browsers: 'last 2 versions'})\n                ]\n            },\n            dist: {\n                src: '<%%= app %>/css/app.css'\n            }\n        },\n\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc'\n            },\n            all: [\n                'Gruntfile.js',\n                '<%%= app %>/js/**/*.js'\n            ]\n        },\n\n        clean: {\n            dist: {\n                src: ['<%%= dist %>/*']\n            },\n        },\n        copy: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd:'<%%= app %>/',\n                    src: ['fonts/**', '**/*.html', '!**/*.scss', '!bower_components/**'],\n                    dest: '<%%= dist %>/'\n                }<% if (fontAwesome) { %> , {\n                    expand: true,\n                    flatten: true,\n                    src: ['<%%= app %>/bower_components/font-awesome/fonts/**'],\n                    dest: '<%%= dist %>/fonts/',\n                    filter: 'isFile'\n                } <% } %>]\n            },\n        },\n\n        imagemin: {\n            target: {\n                files: [{\n                    expand: true,\n                    cwd: '<%%= app %>/images/',\n                    src: ['**/*.{jpg,gif,svg,jpeg,png}'],\n                    dest: '<%%= dist %>/images/'\n                }]\n            }\n        },\n\n        uglify: {\n            options: {\n                preserveComments: 'some',\n                mangle: false\n            }\n        },\n\n        useminPrepare: {\n            html: ['<%%= app %>/index.html'],\n            options: {\n                dest: '<%%= dist %>'\n            }\n        },\n\n        usemin: {\n            html: ['<%%= dist %>/**/*.html', '!<%%= app %>/bower_components/**'],\n            css: ['<%%= dist %>/css/**/*.css'],\n            options: {\n                dirs: ['<%%= dist %>']\n            }\n        },\n\n        watch: {\n            grunt: {\n                files: ['Gruntfile.js'],\n                tasks: ['sass', 'postcss']\n            },\n            sass: {\n                files: '<%%= app %>/scss/**/*.scss',\n                tasks: ['sass', 'postcss']\n            },\n            livereload: {\n                files: ['<%%= app %>/**/*.html', '!<%%= app %>/bower_components/**', '<%%= app %>/js/**/*.js', '<%%= app %>/css/**/*.css', '<%%= app %>/images/**/*.{jpg,gif,svg,jpeg,png}'],\n                options: {\n                    livereload: true\n                }\n            }\n        },\n\n        connect: {\n            app: {\n                options: {\n                    port: 9000,\n                    base: '<%%= app %>/',\n                    open: true,\n                    livereload: true,\n                    hostname: '127.0.0.1'\n                }\n            },\n            dist: {\n                options: {\n                    port: 9001,\n                    base: '<%%= dist %>/',\n                    open: true,\n                    keepalive: true,\n                    livereload: false,\n                    hostname: '127.0.0.1'\n                }\n            }\n        },\n\n        wiredep: {\n            target: {\n                src: [\n                    '<%%= app %>/**/*.html'\n                ],\n                exclude: [\n                    'modernizr',<% if (fontAwesome) { %>\n                    'font-awesome',<% } %>\n                    'jquery-placeholder',\n                    'foundation'\n                ]\n            }\n        }\n\n    });\n\n    grunt.registerTask('compile-sass', ['sass', 'postcss']);\n    grunt.registerTask('bower-install', ['wiredep']);\n    grunt.registerTask('default', ['compile-sass', 'bower-install', 'connect:app', 'watch']);\n    grunt.registerTask('validate-js', ['jshint']);\n    grunt.registerTask('server-dist', ['connect:dist']);\n    grunt.registerTask('publish', ['compile-sass', 'clean:dist', 'validate-js', 'useminPrepare', 'copy:dist', 'newer:imagemin', 'concat', 'cssmin', 'uglify', 'usemin']);\n\n};\n"}